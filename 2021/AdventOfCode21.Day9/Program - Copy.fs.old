// https://adventofcode.com/2021/day/8

open System;

// part1

//let lines = System.IO.File.ReadLines "input.txt" |> Seq.toArray
let lines = System.IO.File.ReadLines "example.txt" |> Seq.toArray
//let lines = System.IO.File.ReadLines "debug.txt" |> Seq.toArray

let mapHeight = Array.length lines
let mapWidth = (lines |> Array.head).Length

let (_, heightMap) = 
    let writeHeights (index, map) (line: string) =
        let charToInt c =
            match c with
            | '0' -> 0
            | '1' -> 1
            | '2' -> 2
            | '3' -> 3
            | '4' -> 4
            | '5' -> 5
            | '6' -> 6
            | '7' -> 7
            | '8' -> 8
            | '9' -> 9
            | _ -> failwith "Invalid character."

        let copyRowInto arrTarget2D index arrSource =
            let mutable col = 0
            for i in [0..(Array.length arrSource) - 1] do
                Array2D.set arrTarget2D col index (Array.get arrSource i)
                col <- col + 1

        let row = line |> Seq.map charToInt |> Seq.toArray
        copyRowInto map index row
        (index + 1, map)

    lines |> Seq.fold writeHeights (0, (Array2D.create<int> mapWidth mapHeight 0))

let isLowPoint x y =
    let top = (x, if y = 0 then y else y - 1)
    let left = ((if x = 0 then x else x - 1), y)
    let right = ((if x = mapWidth - 1 then x else x + 1), y)
    let bottom = (x, if y = mapHeight - 1 then y else y + 1)

    let valPt = Array2D.get heightMap x y
    let valTop = Array2D.get heightMap (fst top) (snd top)
    let valLeft = Array2D.get heightMap (fst left) (snd left)
    let valRight = Array2D.get heightMap (fst right) (snd right)
    let valBottom = Array2D.get heightMap (fst bottom) (snd bottom)

    let rightMost = fst right = x && snd right = y
    let bottomMost = fst bottom = x && snd bottom = y

    let ret = 
        valPt <= valTop && 
        valPt <= valLeft &&
        (valPt < valRight || rightMost) &&
        (valPt < valBottom || bottomMost)

    ret

let determineLowPoints =
    let mutable lowPoints = Array.empty
    for y in [0..mapHeight - 1] do
        for x in [0..mapWidth - 1] do
            if isLowPoint x y = true then
                lowPoints <- Array.append lowPoints (Array.singleton (x, y))
    lowPoints


let lowPoints = determineLowPoints
//printfn "%A" lowPoints

let printHeightMap lowPoints =
    for y in [0..mapHeight - 1] do
        for x in [0..mapWidth - 1] do
            let i = Array.FindIndex(lowPoints, (fun (lpx, lpy) -> lpx = x && lpy = y))
            let value = Array2D.get heightMap x y
            if i > -1 then 
                printf "%d* " value
            else
                printf "%d  " value
        printfn ""

//printHeightMap lowPoints


let calcRiskLevel lowPoints =
    let riskLvl (x, y) =
        let value = Array2D.get heightMap x y
        value + 1

    lowPoints 
    |> Array.map riskLvl
    |> Array.sum

let riskLevel = calcRiskLevel lowPoints
printfn "1) Risk Level %d" riskLevel      // 496

// part2

// if not 9 its part of a basin
// basin = array of coords
// iterate thru each val and lookup its basin
// lookup coord top and left when not 9


let addToBasin x y basins =
    let findBasinIndex x y =
        let isInBasin (i: int) b = 
            if b |> Array.contains (x, y) then 
                Some i else None

        basins 
        |> Array.mapi isInBasin
        |> Array.choose id
        |> Array.tryHead

    let getValue x y = Array2D.get heightMap x y

    let addFor toBasins findx findy addx addy =
        let i = findBasinIndex findx findy
        if i.IsSome then
            let exist = findBasinIndex addx addy
            if exist.IsNone then
                let b = Array.get toBasins  i.Value
                let newB = Array.append b (Array.singleton (addx, addy))
                Array.set toBasins  i.Value newB
            toBasins
        else
            let newB = Array.singleton (addx, addy)
            Array.append toBasins  (Array.singleton newB)

    let topY = if y = 0 then None else Some (y - 1)
    let leftX = if x = 0 then None else Some (x - 1)
    let rightX = if x = mapWidth - 1 then None else Some (x + 1)
    let bottomY = if y = mapHeight - 1 then None else Some (y + 1)

    if getValue x y = 9 then
        basins
    else
        let mutable result = basins

        result <-
            if leftX.IsSome && getValue leftX.Value y <> 9 then
                result <- addFor result leftX.Value y x y
                addFor result x y leftX.Value y 
            elif rightX.IsSome && getValue rightX.Value y <> 9 then
                result <- addFor result rightX.Value y x y
                addFor result x y rightX.Value y 
            else
                addFor result x y x y

        result <- 
            if topY.IsSome && getValue x topY.Value <> 9 then
                result <- addFor result x topY.Value x y
                addFor result x y x topY.Value
            else 
                result

        if bottomY.IsSome && getValue x bottomY.Value <> 9 then 
            result <- addFor result x bottomY.Value x y 
            addFor result x y x bottomY.Value 
        else 
            result


let topBasins =
    let mutable basins = Array.empty
    for y in [0..mapHeight - 1] do
        for x in [0..mapWidth - 1] do
            basins <- basins |> addToBasin x y
    
    let result = basins |> Array.sortByDescending (fun b -> b.Length)
    result[0..2]

printHeightMap topBasins[1]

let product = topBasins |> Array.fold (fun acc b -> acc * b.Length) 1
printfn "%A" topBasins
printfn "2) Product %d" product

